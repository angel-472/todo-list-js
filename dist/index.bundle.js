(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>s});var a=n(537),i=n.n(a),r=n(645),o=n.n(r)()(i());o.push([t.id,"* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  margin: 1em;\n\n  font-family: sans-serif;\n  background-color: #09090b;\n  color: white;\n}\n\n.icon-round {\n  background-color: #2196F3;\n  padding: 0.5em;\n  border-radius: 100px;\n}\n\n.icon-square {\n  background-color: #2196F3;\n  padding: 0.5em;\n  border-radius: .5em;\n}\n\nmain {\n  display: flex;\n  gap: 1em;\n}\n\n#header-text {\n  font-family: 'Lato';\n  margin: 1rem 0;\n  font-weight: bold;\n  color: orange;\n}\n\n.div-task-lists {\n  display: flex;\n  flex-direction: column;\n  gap: .75rem;\n  margin-top: 2rem;\n}\n\n.btn-task-list {\n  display: flex;\n  gap: .5rem;\n  align-items: center;\n\n  width: 250px;\n  padding: .5em;\n  text-align: left;\n  font-family: 'Lato';\n  font-weight: bold;\n  font-size: 16px;\n\n  border: none;\n  border-radius: 8px;\n\n  background-color: #27272a;\n  color: white;\n  cursor: pointer;\n}\n\n.btn-task-list .task-amount {\n  margin-left: auto;\n}\n\n#tasks {\n  height: 100%;\n  width: 100%;\n  background-color: #18181b;\n  border-radius: 16px;\n  padding: 1em;\n  margin-top: 2rem;\n\n  display: flex;\n  flex-direction: column;\n}\n\n#tasks-container {\n  padding: 1rem 0rem;\n}\n\n#tasks-header {\n  display: flex;\n  align-items: center;\n}\n\n#tasks-title {\n  font-family: 'Lato';\n}\n\n#btn-edit-task-list {\n  margin-left: auto;\n  cursor: pointer;\n}\n\n#btn-edit-task-list:hover {\n  color: gray;\n}\n\n.task {\n  display: flex;\n  gap: 1em;\n  padding: .5em 0;\n}\n\n.task-checkbox {\n  align-self: flex-start;\n  background-color: rgba(0,0,0,0);\n  width: 1.5em;\n  height: 1.5em;\n  border: 2px solid #a1a1aa;\n  border-radius: 100px;\n  color: #a1a1aa;\n  cursor: pointer;\n  flex-shrink: 0;\n}\n\n.task-details {\n  cursor: pointer;\n}\n\n.task-name {\n  font-weight: normal;\n}\n\n.task-description {\n  color: #a1a1aa;\n  margin-top: .2em;\n}\n\n.task-date {\n  color: #a1a1aa;\n  margin-top: .2em;\n}\n\n.task-date-past {\n  color: #ef4444;\n}\n\n.task-delete-btn {\n  cursor: pointer;\n  color: #52525b;\n  height: max-content;\n}\n\n.task-hover-icons {\n  margin-left: auto;\n}\n\n#new-task {\n  background-color: orange;\n  border: none;\n  color: black;\n  font-family: 'Lato';\n  font-weight: bold;\n  width: max-content;\n  padding: .5em;\n  border-radius: .5em;\n  margin-top: .5em;\n  display: flex;\n  gap: .5rem;\n  align-items: center;\n  cursor: pointer;\n}\n\n#new-list {\n  background-color: #2196F3;\n  border: none;\n  color: black;\n  font-family: 'Lato';\n  font-weight: bold;\n  width: max-content;\n  padding: .5em;\n  border-radius: .5em;\n  margin-top: 2em;\n  display: flex;\n  gap: .5rem;\n  align-items: center;\n  cursor: pointer;\n}\n\n#task-list-editor {\n  display: none;\n  position: absolute;\n  z-index: 10;\n  align-items: center;\n  justify-content: center;\n  width: calc(100vw - 1em);\n  height: calc(100vh - 1em);\n  font-family: 'Lato';\n  backdrop-filter: blur(1px);\n}\n\n#task-list-editor-box {\n  background-color: #18181b;\n  padding: 1em;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  border-radius: 16px;\n  gap: 1em;\n}\n\n#task-list-editor-header {\n  display: flex;\n  gap: 4em;\n}\n\n#task-list-editor a {\n  color: #03A9F4;\n  cursor: pointer;\n}\n\n#task-list-editor a.disabled {\n  color: #494e50;\n  cursor: auto;\n}\n\n#task-list-editor-title {\n  font-weight: bold;\n}\n\n#task-list-editor-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding: 1rem;\n  background-color: #27272a;\n  border-radius: 8px;\n  gap: 2em;\n}\n\n#task-list-editor-details {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1em;\n}\n\n#task-list-editor-icon {\n  font-size: 32px;\n}\n\n#task-list-editor-name {\n  text-align: center;\n  padding: .5em;\n  font-size: 16px;\n  border-radius: .5em;\n  border: none;\n  font-weight: bold;\n}\n\n.color-circle {\n  background-color: red;\n  width: 2rem;\n  height: 2rem;\n  border-radius: 100px;\n  border: none;\n  cursor: pointer;\n}\n\n.color-circle.selected {\n  outline: 3px solid #525259;\n}\n\n#task-list-editor-colors {\n  display: flex;\n  gap: 1em;\n  flex-wrap: wrap;\n  max-width: 18em;\n  justify-content: center;\n}\n\n#task-list-editor-icons {\n  display: flex;\n  gap: 1em;\n  flex-wrap: wrap;\n  max-width: 18em;\n  justify-content: center;\n}\n\n#task-list-editor-icons > button {\n  width: 2rem;\n  height: 2rem;\n  border-radius: 100px;\n  border: none;\n  cursor: pointer;\n  background-color: #3f3f46;\n  color: white;\n}\n\n#task-list-editor-icons > button.selected {\n  outline: 3px solid #525259;\n}\n\n#task-editor {\n  display: none;\n  position: absolute;\n  z-index: 10;\n  align-items: center;\n  justify-content: center;\n  width: calc(100vw - 1em);\n  height: calc(100vh - 1em);\n  font-family: 'Lato';\n  backdrop-filter: blur(1px);\n}\n\n#task-editor-box {\n  background-color: #18181b;\n  padding: 1em;\n  border-radius: 16px;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1em;\n}\n\n#task-editor-header {\n  display: flex;\n  gap: 4em;\n}\n\n#task-editor a {\n  color: #03A9F4;\n  cursor: pointer;\n}\n\n#task-editor a.disabled {\n  color: #494e50;\n  cursor: auto;\n}\n\n#task-editor-title {\n  font-weight: bold;\n}\n\n#task-editor-body {\n  display: flex;\n  flex-direction: column;\n  gap: 1em;\n  padding: 1em;\n  background-color: #27272a;\n  border-radius: 1em;\n  width: 100%;\n}\n\n#task-editor-body input{\n  border: none;\n  padding: 1em;\n  text-align: center;\n  font-family: 'Lato';\n  border-radius: 8px;\n  font-weight: bold;\n}\n\n#task-editor-list-container {\n  display: flex;\n  justify-content: space-between;\n  border: 2px solid #3f3f46;\n  padding: .5em;\n  border-radius: 8px;\n}\n\n#task-editor-list {\n  background-color: rgba(0,0,0,0);\n  border: none;\n  color: gray;\n  text-align: right;\n}\n\n.empty-task-list-dialog {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 3em 0em;\n  color: gray;\n}\n\n.btn-delete {\n  background-color: #ef4444;\n  padding: .5em;\n  border-radius: .5em;\n  color: white;\n  border: none;\n  cursor: pointer;\n  font-family: 'Lato';\n}\n\n.alltasks-screen-list-head {\n  font-family: 'Lato';\n  margin-bottom: 0.5rem;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:["* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  margin: 1em;\n\n  font-family: sans-serif;\n  background-color: #09090b;\n  color: white;\n}\n\n.icon-round {\n  background-color: #2196F3;\n  padding: 0.5em;\n  border-radius: 100px;\n}\n\n.icon-square {\n  background-color: #2196F3;\n  padding: 0.5em;\n  border-radius: .5em;\n}\n\nmain {\n  display: flex;\n  gap: 1em;\n}\n\n#header-text {\n  font-family: 'Lato';\n  margin: 1rem 0;\n  font-weight: bold;\n  color: orange;\n}\n\n.div-task-lists {\n  display: flex;\n  flex-direction: column;\n  gap: .75rem;\n  margin-top: 2rem;\n}\n\n.btn-task-list {\n  display: flex;\n  gap: .5rem;\n  align-items: center;\n\n  width: 250px;\n  padding: .5em;\n  text-align: left;\n  font-family: 'Lato';\n  font-weight: bold;\n  font-size: 16px;\n\n  border: none;\n  border-radius: 8px;\n\n  background-color: #27272a;\n  color: white;\n  cursor: pointer;\n}\n\n.btn-task-list .task-amount {\n  margin-left: auto;\n}\n\n#tasks {\n  height: 100%;\n  width: 100%;\n  background-color: #18181b;\n  border-radius: 16px;\n  padding: 1em;\n  margin-top: 2rem;\n\n  display: flex;\n  flex-direction: column;\n}\n\n#tasks-container {\n  padding: 1rem 0rem;\n}\n\n#tasks-header {\n  display: flex;\n  align-items: center;\n}\n\n#tasks-title {\n  font-family: 'Lato';\n}\n\n#btn-edit-task-list {\n  margin-left: auto;\n  cursor: pointer;\n}\n\n#btn-edit-task-list:hover {\n  color: gray;\n}\n\n.task {\n  display: flex;\n  gap: 1em;\n  padding: .5em 0;\n}\n\n.task-checkbox {\n  align-self: flex-start;\n  background-color: rgba(0,0,0,0);\n  width: 1.5em;\n  height: 1.5em;\n  border: 2px solid #a1a1aa;\n  border-radius: 100px;\n  color: #a1a1aa;\n  cursor: pointer;\n  flex-shrink: 0;\n}\n\n.task-details {\n  cursor: pointer;\n}\n\n.task-name {\n  font-weight: normal;\n}\n\n.task-description {\n  color: #a1a1aa;\n  margin-top: .2em;\n}\n\n.task-date {\n  color: #a1a1aa;\n  margin-top: .2em;\n}\n\n.task-date-past {\n  color: #ef4444;\n}\n\n.task-delete-btn {\n  cursor: pointer;\n  color: #52525b;\n  height: max-content;\n}\n\n.task-hover-icons {\n  margin-left: auto;\n}\n\n#new-task {\n  background-color: orange;\n  border: none;\n  color: black;\n  font-family: 'Lato';\n  font-weight: bold;\n  width: max-content;\n  padding: .5em;\n  border-radius: .5em;\n  margin-top: .5em;\n  display: flex;\n  gap: .5rem;\n  align-items: center;\n  cursor: pointer;\n}\n\n#new-list {\n  background-color: #2196F3;\n  border: none;\n  color: black;\n  font-family: 'Lato';\n  font-weight: bold;\n  width: max-content;\n  padding: .5em;\n  border-radius: .5em;\n  margin-top: 2em;\n  display: flex;\n  gap: .5rem;\n  align-items: center;\n  cursor: pointer;\n}\n\n#task-list-editor {\n  display: none;\n  position: absolute;\n  z-index: 10;\n  align-items: center;\n  justify-content: center;\n  width: calc(100vw - 1em);\n  height: calc(100vh - 1em);\n  font-family: 'Lato';\n  backdrop-filter: blur(1px);\n}\n\n#task-list-editor-box {\n  background-color: #18181b;\n  padding: 1em;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  border-radius: 16px;\n  gap: 1em;\n}\n\n#task-list-editor-header {\n  display: flex;\n  gap: 4em;\n}\n\n#task-list-editor a {\n  color: #03A9F4;\n  cursor: pointer;\n}\n\n#task-list-editor a.disabled {\n  color: #494e50;\n  cursor: auto;\n}\n\n#task-list-editor-title {\n  font-weight: bold;\n}\n\n#task-list-editor-body {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  padding: 1rem;\n  background-color: #27272a;\n  border-radius: 8px;\n  gap: 2em;\n}\n\n#task-list-editor-details {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1em;\n}\n\n#task-list-editor-icon {\n  font-size: 32px;\n}\n\n#task-list-editor-name {\n  text-align: center;\n  padding: .5em;\n  font-size: 16px;\n  border-radius: .5em;\n  border: none;\n  font-weight: bold;\n}\n\n.color-circle {\n  background-color: red;\n  width: 2rem;\n  height: 2rem;\n  border-radius: 100px;\n  border: none;\n  cursor: pointer;\n}\n\n.color-circle.selected {\n  outline: 3px solid #525259;\n}\n\n#task-list-editor-colors {\n  display: flex;\n  gap: 1em;\n  flex-wrap: wrap;\n  max-width: 18em;\n  justify-content: center;\n}\n\n#task-list-editor-icons {\n  display: flex;\n  gap: 1em;\n  flex-wrap: wrap;\n  max-width: 18em;\n  justify-content: center;\n}\n\n#task-list-editor-icons > button {\n  width: 2rem;\n  height: 2rem;\n  border-radius: 100px;\n  border: none;\n  cursor: pointer;\n  background-color: #3f3f46;\n  color: white;\n}\n\n#task-list-editor-icons > button.selected {\n  outline: 3px solid #525259;\n}\n\n#task-editor {\n  display: none;\n  position: absolute;\n  z-index: 10;\n  align-items: center;\n  justify-content: center;\n  width: calc(100vw - 1em);\n  height: calc(100vh - 1em);\n  font-family: 'Lato';\n  backdrop-filter: blur(1px);\n}\n\n#task-editor-box {\n  background-color: #18181b;\n  padding: 1em;\n  border-radius: 16px;\n\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1em;\n}\n\n#task-editor-header {\n  display: flex;\n  gap: 4em;\n}\n\n#task-editor a {\n  color: #03A9F4;\n  cursor: pointer;\n}\n\n#task-editor a.disabled {\n  color: #494e50;\n  cursor: auto;\n}\n\n#task-editor-title {\n  font-weight: bold;\n}\n\n#task-editor-body {\n  display: flex;\n  flex-direction: column;\n  gap: 1em;\n  padding: 1em;\n  background-color: #27272a;\n  border-radius: 1em;\n  width: 100%;\n}\n\n#task-editor-body input{\n  border: none;\n  padding: 1em;\n  text-align: center;\n  font-family: 'Lato';\n  border-radius: 8px;\n  font-weight: bold;\n}\n\n#task-editor-list-container {\n  display: flex;\n  justify-content: space-between;\n  border: 2px solid #3f3f46;\n  padding: .5em;\n  border-radius: 8px;\n}\n\n#task-editor-list {\n  background-color: rgba(0,0,0,0);\n  border: none;\n  color: gray;\n  text-align: right;\n}\n\n.empty-task-list-dialog {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 3em 0em;\n  color: gray;\n}\n\n.btn-delete {\n  background-color: #ef4444;\n  padding: .5em;\n  border-radius: .5em;\n  color: white;\n  border: none;\n  cursor: pointer;\n  font-family: 'Lato';\n}\n\n.alltasks-screen-list-head {\n  font-family: 'Lato';\n  margin-bottom: 0.5rem;\n}"],sourceRoot:""}]);const s=o},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",a=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),a&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),a&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,a,i,r){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(a)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(o[d]=!0)}for(var l=0;l<t.length;l++){var c=[].concat(t[l]);a&&o[c[0]]||(void 0!==r&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=r),n&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=n):c[2]=n),i&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=i):c[4]="".concat(i)),e.push(c))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),r="/*# ".concat(i," */");return[e].concat([r]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,a=0;a<e.length;a++)if(e[a].identifier===t){n=a;break}return n}function a(t,a){for(var r={},o=[],s=0;s<t.length;s++){var d=t[s],l=a.base?d[0]+a.base:d[0],c=r[l]||0,u="".concat(l," ").concat(c);r[l]=c+1;var A=n(u),m={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==A)e[A].references++,e[A].updater(m);else{var h=i(m,a);a.byIndex=s,e.splice(s,0,{identifier:u,updater:h,references:1})}o.push(u)}return o}function i(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,i){var r=a(t=t||[],i=i||{});return function(t){t=t||[];for(var o=0;o<r.length;o++){var s=n(r[o]);e[s].references--}for(var d=a(t,i),l=0;l<r.length;l++){var c=n(r[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}r=d}}},569:t=>{var e={};t.exports=function(t,n){var a=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var a="";n.supports&&(a+="@supports (".concat(n.supports,") {")),n.media&&(a+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(a+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),a+=n.css,i&&(a+="}"),n.media&&(a+="}"),n.supports&&(a+="}");var r=n.sourceMap;r&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(a,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(a){var i=e[a];if(void 0!==i)return i.exports;var r=e[a]={id:a,exports:{}};return t[a](r,r.exports,n),r.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var a in e)n.o(e,a)&&!n.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:e[a]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{var t=n(379),e=n.n(t),a=n(795),i=n.n(a),r=n(569),o=n.n(r),s=n(565),d=n.n(s),l=n(216),c=n.n(l),u=n(589),A=n.n(u),m=n(426),h={};h.styleTagTransform=A(),h.setAttributes=d(),h.insert=o().bind(null,"head"),h.domAPI=i(),h.insertStyleElement=c(),e()(m.Z,h),m.Z&&m.Z.locals&&m.Z.locals,Math.pow(10,8);var f=36e5;function p(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function g(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function E(t,e){var n;p(1,arguments);var a=g(null!==(n=null==e?void 0:e.additionalDigits)&&void 0!==n?n:2);if(2!==a&&1!==a&&0!==a)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof t&&"[object String]"!==Object.prototype.toString.call(t))return new Date(NaN);var i,r=function(t){var e,n={},a=t.split(b.dateTimeDelimiter);if(a.length>2)return n;if(/:/.test(a[0])?e=a[0]:(n.date=a[0],e=a[1],b.timeZoneDelimiter.test(n.date)&&(n.date=t.split(b.timeZoneDelimiter)[0],e=t.substr(n.date.length,t.length))),e){var i=b.timezone.exec(e);i?(n.time=e.replace(i[1],""),n.timezone=i[1]):n.time=e}return n}(t);if(r.date){var o=function(t,e){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),a=t.match(n);if(!a)return{year:NaN,restDateString:""};var i=a[1]?parseInt(a[1]):null,r=a[2]?parseInt(a[2]):null;return{year:null===r?i:100*r,restDateString:t.slice((a[1]||a[2]).length)}}(r.date,a);i=function(t,e){if(null===e)return new Date(NaN);var n=t.match(k);if(!n)return new Date(NaN);var a=!!n[4],i=y(n[1]),r=y(n[2])-1,o=y(n[3]),s=y(n[4]),d=y(n[5])-1;if(a)return function(t,e,n){return e>=1&&e<=53&&n>=0&&n<=6}(0,s,d)?function(t,e,n){var a=new Date(0);a.setUTCFullYear(t,0,4);var i=7*(e-1)+n+1-(a.getUTCDay()||7);return a.setUTCDate(a.getUTCDate()+i),a}(e,s,d):new Date(NaN);var l=new Date(0);return function(t,e,n){return e>=0&&e<=11&&n>=1&&n<=(w[e]||(T(t)?29:28))}(e,r,o)&&function(t,e){return e>=1&&e<=(T(t)?366:365)}(e,i)?(l.setUTCFullYear(e,r,Math.max(i,o)),l):new Date(NaN)}(o.restDateString,o.year)}if(!i||isNaN(i.getTime()))return new Date(NaN);var s,d=i.getTime(),l=0;if(r.time&&(l=function(t){var e=t.match(C);if(!e)return NaN;var n=v(e[1]),a=v(e[2]),i=v(e[3]);return function(t,e,n){return 24===t?0===e&&0===n:n>=0&&n<60&&e>=0&&e<60&&t>=0&&t<25}(n,a,i)?n*f+6e4*a+1e3*i:NaN}(r.time),isNaN(l)))return new Date(NaN);if(!r.timezone){var c=new Date(d+l),u=new Date(0);return u.setFullYear(c.getUTCFullYear(),c.getUTCMonth(),c.getUTCDate()),u.setHours(c.getUTCHours(),c.getUTCMinutes(),c.getUTCSeconds(),c.getUTCMilliseconds()),u}return s=function(t){if("Z"===t)return 0;var e=t.match(B);if(!e)return 0;var n="+"===e[1]?-1:1,a=parseInt(e[2]),i=e[3]&&parseInt(e[3])||0;return function(t,e){return e>=0&&e<=59}(0,i)?n*(a*f+6e4*i):NaN}(r.timezone),isNaN(s)?new Date(NaN):new Date(d+l+s)}var b={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},k=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,C=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,B=/^([+-])(\d{2})(?::?(\d{2}))?$/;function y(t){return t?parseInt(t):1}function v(t){return t&&parseFloat(t.replace(",","."))||0}var w=[31,null,31,30,31,30,31,31,30,31,30,31];function T(t){return t%400==0||t%4==0&&t%100!=0}function x(t){return x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},x(t)}function L(t){p(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===x(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function D(t){p(1,arguments);var e=L(t);return e.setHours(0,0,0,0),e}function S(t,e){p(2,arguments);var n=D(t),a=D(e);return n.getTime()===a.getTime()}function I(t){p(1,arguments);var e=L(t),n=e.getUTCDay(),a=(n<1?7:0)+n-1;return e.setUTCDate(e.getUTCDate()-a),e.setUTCHours(0,0,0,0),e}function M(t){p(1,arguments);var e=L(t),n=e.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(n+1,0,4),a.setUTCHours(0,0,0,0);var i=I(a),r=new Date(0);r.setUTCFullYear(n,0,4),r.setUTCHours(0,0,0,0);var o=I(r);return e.getTime()>=i.getTime()?n+1:e.getTime()>=o.getTime()?n:n-1}var Y={};function U(){return Y}function N(t,e){var n,a,i,r,o,s,d,l;p(1,arguments);var c=U(),u=g(null!==(n=null!==(a=null!==(i=null!==(r=null==e?void 0:e.weekStartsOn)&&void 0!==r?r:null==e||null===(o=e.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==i?i:c.weekStartsOn)&&void 0!==a?a:null===(d=c.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==n?n:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var A=L(t),m=A.getUTCDay(),h=(m<u?7:0)+m-u;return A.setUTCDate(A.getUTCDate()-h),A.setUTCHours(0,0,0,0),A}function W(t,e){var n,a,i,r,o,s,d,l;p(1,arguments);var c=L(t),u=c.getUTCFullYear(),A=U(),m=g(null!==(n=null!==(a=null!==(i=null!==(r=null==e?void 0:e.firstWeekContainsDate)&&void 0!==r?r:null==e||null===(o=e.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==i?i:A.firstWeekContainsDate)&&void 0!==a?a:null===(d=A.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==n?n:1);if(!(m>=1&&m<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(u+1,0,m),h.setUTCHours(0,0,0,0);var f=N(h,e),E=new Date(0);E.setUTCFullYear(u,0,m),E.setUTCHours(0,0,0,0);var b=N(E,e);return c.getTime()>=f.getTime()?u+1:c.getTime()>=b.getTime()?u:u-1}function P(t,e){for(var n=t<0?"-":"",a=Math.abs(t).toString();a.length<e;)a="0"+a;return n+a}const j=function(t,e){var n=t.getUTCFullYear(),a=n>0?n:1-n;return P("yy"===e?a%100:a,e.length)},z=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):P(n+1,2)},F=function(t,e){return P(t.getUTCDate(),e.length)},O=function(t,e){return P(t.getUTCHours()%12||12,e.length)},q=function(t,e){return P(t.getUTCHours(),e.length)},Q=function(t,e){return P(t.getUTCMinutes(),e.length)},H=function(t,e){return P(t.getUTCSeconds(),e.length)},Z=function(t,e){var n=e.length,a=t.getUTCMilliseconds();return P(Math.floor(a*Math.pow(10,n-3)),e.length)};var R={G:function(t,e,n){var a=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(a,{width:"abbreviated"});case"GGGGG":return n.era(a,{width:"narrow"});default:return n.era(a,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var a=t.getUTCFullYear(),i=a>0?a:1-a;return n.ordinalNumber(i,{unit:"year"})}return j(t,e)},Y:function(t,e,n,a){var i=W(t,a),r=i>0?i:1-i;return"YY"===e?P(r%100,2):"Yo"===e?n.ordinalNumber(r,{unit:"year"}):P(r,e.length)},R:function(t,e){return P(M(t),e.length)},u:function(t,e){return P(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var a=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(a);case"QQ":return P(a,2);case"Qo":return n.ordinalNumber(a,{unit:"quarter"});case"QQQ":return n.quarter(a,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(a,{width:"narrow",context:"formatting"});default:return n.quarter(a,{width:"wide",context:"formatting"})}},q:function(t,e,n){var a=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(a);case"qq":return P(a,2);case"qo":return n.ordinalNumber(a,{unit:"quarter"});case"qqq":return n.quarter(a,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(a,{width:"narrow",context:"standalone"});default:return n.quarter(a,{width:"wide",context:"standalone"})}},M:function(t,e,n){var a=t.getUTCMonth();switch(e){case"M":case"MM":return z(t,e);case"Mo":return n.ordinalNumber(a+1,{unit:"month"});case"MMM":return n.month(a,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(a,{width:"narrow",context:"formatting"});default:return n.month(a,{width:"wide",context:"formatting"})}},L:function(t,e,n){var a=t.getUTCMonth();switch(e){case"L":return String(a+1);case"LL":return P(a+1,2);case"Lo":return n.ordinalNumber(a+1,{unit:"month"});case"LLL":return n.month(a,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(a,{width:"narrow",context:"standalone"});default:return n.month(a,{width:"wide",context:"standalone"})}},w:function(t,e,n,a){var i=function(t,e){p(1,arguments);var n=L(t),a=N(n,e).getTime()-function(t,e){var n,a,i,r,o,s,d,l;p(1,arguments);var c=U(),u=g(null!==(n=null!==(a=null!==(i=null!==(r=null==e?void 0:e.firstWeekContainsDate)&&void 0!==r?r:null==e||null===(o=e.locale)||void 0===o||null===(s=o.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==i?i:c.firstWeekContainsDate)&&void 0!==a?a:null===(d=c.locale)||void 0===d||null===(l=d.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==n?n:1),A=W(t,e),m=new Date(0);return m.setUTCFullYear(A,0,u),m.setUTCHours(0,0,0,0),N(m,e)}(n,e).getTime();return Math.round(a/6048e5)+1}(t,a);return"wo"===e?n.ordinalNumber(i,{unit:"week"}):P(i,e.length)},I:function(t,e,n){var a=function(t){p(1,arguments);var e=L(t),n=I(e).getTime()-function(t){p(1,arguments);var e=M(t),n=new Date(0);return n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0),I(n)}(e).getTime();return Math.round(n/6048e5)+1}(t);return"Io"===e?n.ordinalNumber(a,{unit:"week"}):P(a,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):F(t,e)},D:function(t,e,n){var a=function(t){p(1,arguments);var e=L(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var a=n-e.getTime();return Math.floor(a/864e5)+1}(t);return"Do"===e?n.ordinalNumber(a,{unit:"dayOfYear"}):P(a,e.length)},E:function(t,e,n){var a=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(a,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(a,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},e:function(t,e,n,a){var i=t.getUTCDay(),r=(i-a.weekStartsOn+8)%7||7;switch(e){case"e":return String(r);case"ee":return P(r,2);case"eo":return n.ordinalNumber(r,{unit:"day"});case"eee":return n.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(i,{width:"short",context:"formatting"});default:return n.day(i,{width:"wide",context:"formatting"})}},c:function(t,e,n,a){var i=t.getUTCDay(),r=(i-a.weekStartsOn+8)%7||7;switch(e){case"c":return String(r);case"cc":return P(r,e.length);case"co":return n.ordinalNumber(r,{unit:"day"});case"ccc":return n.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(i,{width:"narrow",context:"standalone"});case"cccccc":return n.day(i,{width:"short",context:"standalone"});default:return n.day(i,{width:"wide",context:"standalone"})}},i:function(t,e,n){var a=t.getUTCDay(),i=0===a?7:a;switch(e){case"i":return String(i);case"ii":return P(i,e.length);case"io":return n.ordinalNumber(i,{unit:"day"});case"iii":return n.day(a,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(a,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},a:function(t,e,n){var a=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},b:function(t,e,n){var a,i=t.getUTCHours();switch(a=12===i?"noon":0===i?"midnight":i/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},B:function(t,e,n){var a,i=t.getUTCHours();switch(a=i>=17?"evening":i>=12?"afternoon":i>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(a,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(a,{width:"narrow",context:"formatting"});default:return n.dayPeriod(a,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var a=t.getUTCHours()%12;return 0===a&&(a=12),n.ordinalNumber(a,{unit:"hour"})}return O(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):q(t,e)},K:function(t,e,n){var a=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(a,{unit:"hour"}):P(a,e.length)},k:function(t,e,n){var a=t.getUTCHours();return 0===a&&(a=24),"ko"===e?n.ordinalNumber(a,{unit:"hour"}):P(a,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):Q(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):H(t,e)},S:function(t,e){return Z(t,e)},X:function(t,e,n,a){var i=(a._originalDate||t).getTimezoneOffset();if(0===i)return"Z";switch(e){case"X":return G(i);case"XXXX":case"XX":return V(i);default:return V(i,":")}},x:function(t,e,n,a){var i=(a._originalDate||t).getTimezoneOffset();switch(e){case"x":return G(i);case"xxxx":case"xx":return V(i);default:return V(i,":")}},O:function(t,e,n,a){var i=(a._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+X(i,":");default:return"GMT"+V(i,":")}},z:function(t,e,n,a){var i=(a._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+X(i,":");default:return"GMT"+V(i,":")}},t:function(t,e,n,a){var i=a._originalDate||t;return P(Math.floor(i.getTime()/1e3),e.length)},T:function(t,e,n,a){return P((a._originalDate||t).getTime(),e.length)}};function X(t,e){var n=t>0?"-":"+",a=Math.abs(t),i=Math.floor(a/60),r=a%60;if(0===r)return n+String(i);var o=e||"";return n+String(i)+o+P(r,2)}function G(t,e){return t%60==0?(t>0?"-":"+")+P(Math.abs(t)/60,2):V(t,e)}function V(t,e){var n=e||"",a=t>0?"-":"+",i=Math.abs(t);return a+P(Math.floor(i/60),2)+n+P(i%60,2)}const J=R;var $=function(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},_=function(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}};const K={p:_,P:function(t,e){var n,a=t.match(/(P+)(p+)?/)||[],i=a[1],r=a[2];if(!r)return $(t,e);switch(i){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",$(i,e)).replace("{{time}}",_(r,e))}};var tt=["D","DD"],et=["YY","YYYY"];function nt(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var at={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function it(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const rt={date:it({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:it({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:it({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var ot={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function st(t){return function(e,n){var a;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&t.formattingValues){var i=t.defaultFormattingWidth||t.defaultWidth,r=null!=n&&n.width?String(n.width):i;a=t.formattingValues[r]||t.formattingValues[i]}else{var o=t.defaultWidth,s=null!=n&&n.width?String(n.width):t.defaultWidth;a=t.values[s]||t.values[o]}return a[t.argumentCallback?t.argumentCallback(e):e]}}const dt={ordinalNumber:function(t,e){var n=Number(t),a=n%100;if(a>20||a<10)switch(a%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:st({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:st({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return t-1}}),month:st({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:st({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:st({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function lt(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=n.width,i=a&&t.matchPatterns[a]||t.matchPatterns[t.defaultMatchWidth],r=e.match(i);if(!r)return null;var o,s=r[0],d=a&&t.parsePatterns[a]||t.parsePatterns[t.defaultParseWidth],l=Array.isArray(d)?function(t,e){for(var n=0;n<t.length;n++)if(t[n].test(s))return n}(d):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&t[n].test(s))return n}(d);return o=t.valueCallback?t.valueCallback(l):l,{value:o=n.valueCallback?n.valueCallback(o):o,rest:e.slice(s.length)}}}var ct,ut={ordinalNumber:(ct={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(ct.matchPattern);if(!n)return null;var a=n[0],i=t.match(ct.parsePattern);if(!i)return null;var r=ct.valueCallback?ct.valueCallback(i[0]):i[0];return{value:r=e.valueCallback?e.valueCallback(r):r,rest:t.slice(a.length)}}),era:lt({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:lt({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:lt({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:lt({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:lt({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const At={code:"en-US",formatDistance:function(t,e,n){var a,i=at[t];return a="string"==typeof i?i:1===e?i.one:i.other.replace("{{count}}",e.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+a:a+" ago":a},formatLong:rt,formatRelative:function(t,e,n,a){return ot[t]},localize:dt,match:ut,options:{weekStartsOn:0,firstWeekContainsDate:1}};var mt=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,ht=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ft=/^'([^]*?)'?$/,pt=/''/g,gt=/[a-zA-Z]/;function Et(t,e,n){var a,i,r,o,s,d,l,c,u,A,m,h,f,E,b,k,C,B;p(2,arguments);var y=String(e),v=U(),w=null!==(a=null!==(i=null==n?void 0:n.locale)&&void 0!==i?i:v.locale)&&void 0!==a?a:At,T=g(null!==(r=null!==(o=null!==(s=null!==(d=null==n?void 0:n.firstWeekContainsDate)&&void 0!==d?d:null==n||null===(l=n.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==s?s:v.firstWeekContainsDate)&&void 0!==o?o:null===(u=v.locale)||void 0===u||null===(A=u.options)||void 0===A?void 0:A.firstWeekContainsDate)&&void 0!==r?r:1);if(!(T>=1&&T<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var D=g(null!==(m=null!==(h=null!==(f=null!==(E=null==n?void 0:n.weekStartsOn)&&void 0!==E?E:null==n||null===(b=n.locale)||void 0===b||null===(k=b.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==f?f:v.weekStartsOn)&&void 0!==h?h:null===(C=v.locale)||void 0===C||null===(B=C.options)||void 0===B?void 0:B.weekStartsOn)&&void 0!==m?m:0);if(!(D>=0&&D<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!w.localize)throw new RangeError("locale must contain localize property");if(!w.formatLong)throw new RangeError("locale must contain formatLong property");var S=L(t);if(!function(t){if(p(1,arguments),!function(t){return p(1,arguments),t instanceof Date||"object"===x(t)&&"[object Date]"===Object.prototype.toString.call(t)}(t)&&"number"!=typeof t)return!1;var e=L(t);return!isNaN(Number(e))}(S))throw new RangeError("Invalid time value");var I=function(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}(S),M=function(t,e){return p(2,arguments),function(t,e){p(2,arguments);var n=L(t).getTime(),a=g(e);return new Date(n+a)}(t,-g(e))}(S,I),Y={firstWeekContainsDate:T,weekStartsOn:D,locale:w,_originalDate:S};return y.match(ht).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,K[e])(t,w.formatLong):t})).join("").match(mt).map((function(a){if("''"===a)return"'";var i,r,o=a[0];if("'"===o)return(r=(i=a).match(ft))?r[1].replace(pt,"'"):i;var s,d=J[o];if(d)return null!=n&&n.useAdditionalWeekYearTokens||(s=a,-1===et.indexOf(s))||nt(a,e,String(t)),null!=n&&n.useAdditionalDayOfYearTokens||!function(t){return-1!==tt.indexOf(t)}(a)||nt(a,e,String(t)),d(M,a,w.localize,Y);if(o.match(gt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return a})).join("")}class bt{constructor(t){this.app=t}getTaskElement(t){let e=document.createElement("div");e.classList.add("task");let n=document.createElement("button");n.classList.add("task-checkbox"),e.appendChild(n);let a=document.createElement("div");a.classList.add("task-details");let i=document.createElement("p");if(i.textContent=t.name,i.classList.add("task-name"),a.appendChild(i),void 0!==t.description){let e=document.createElement("p");e.textContent=t.description,e.classList.add("task-description"),a.appendChild(e)}if(void 0!==t.date){let e,n=document.createElement("p"),i=E(t.date);const r=new Date,o=new Date(r);o.setDate(o.getDate()-1);const s=new Date(r);s.setDate(s.getDate()+1),e=S(i,s)?Et(i,"'Tomorrow,' hh:mm a"):S(i,o)?Et(i,"'Yesterday,' hh:mm a"):S(i,r)?Et(i,"'Today, ' hh:mm a"):Et(i,"M/d/yy, hh:mm a"),r>i&&n.classList.add("task-date-past"),n.textContent=e,n.classList.add("task-date"),a.appendChild(n)}e.appendChild(a),a.addEventListener("click",(e=>{this.app.taskEditor.open(t)}));let r=document.createElement("div");r.classList.add("task-hover-icons");let o=document.createElement("i");return o.classList.add("fa-solid","fa-trash","task-delete-btn"),r.appendChild(o),r.style.display="none",e.appendChild(r),e.addEventListener("mouseenter",(()=>{r.style.display="flex"})),e.addEventListener("mouseleave",(()=>{r.style.display="none"})),o.addEventListener("click",(()=>{this.app.storage.deleteTask(t),this.app.storage.save(),this.app.mainUI.updateCurrentScreen(),this.app.sidebar.update()})),e}getEmptyListElement(){let t=document.createElement("div");return t.innerHTML="<p>This list has no tasks, start adding some!</p>",t.classList.add("empty-task-list-dialog"),t}}class kt extends bt{constructor(t,e){super(t),this.taskList=e}show(){document.getElementById("tasks-title").textContent=this.taskList.name;let t=document.getElementById("tasks-container");if(t.innerHTML="",this.taskList.tasks.length>0)this.taskList.tasks.forEach((e=>{let n=this.getTaskElement(e);t.appendChild(n)}));else{let e=document.createElement("div");e.innerHTML="<p>This list has no tasks, start adding some!</p>",e.classList.add("empty-task-list-dialog"),t.appendChild(e)}}}class Ct extends bt{constructor(t){super(t)}show(){let t=document.getElementById("tasks-title"),e=document.getElementById("tasks-container");t.textContent="All Tasks",e.innerHTML="";let n=this.app.storage.getAllTasks();if(n.length>0)n.forEach((t=>{let n=this.getTaskElement(t);e.appendChild(n)}));else{let t=this.getEmptyListElement();e.appendChild(t)}}}class Bt extends bt{constructor(t){super(t)}show(){let t=document.getElementById("tasks-title"),e=document.getElementById("tasks-container");t.textContent="Today",e.innerHTML="";let n=this.app.storage.getTodayTasks();if(n.length>0)n.forEach((t=>{let n=this.getTaskElement(t);e.appendChild(n)}));else{let t=this.getEmptyListElement();e.appendChild(t)}}}class yt{constructor(t){this.app=t}init(){this.newTaskButton=document.getElementById("new-task"),this.newTaskButton.addEventListener("click",(()=>{let t=this.app.storage.createNewTask("New Task");t.new=!0,void 0!==this.currentScreen.taskList&&(t.listId=this.currentScreen.taskList.id),this.app.taskEditor.open(t)})),this.editTaskListButton=document.getElementById("btn-edit-task-list"),this.editTaskListButton.addEventListener("click",(()=>{if(void 0!==this.currentScreen&&void 0!==this.currentScreen.taskList){let t=this.currentScreen.taskList;this.app.taskListEditor.open(t)}})),this.showTaskList(this.app.storage.getDefaultTaskList())}showTaskList(t){let e=new kt(this.app,t);this.currentScreen=e,this.updateCurrentScreen()}showAllTasks(){let t=new Ct(this.app);this.currentScreen=t,this.updateCurrentScreen()}showTodayTasks(){let t=new Bt(this.app);this.currentScreen=t,this.updateCurrentScreen()}getCurrentScreen(){return this.currentScreen}updateCurrentScreen(){void 0!==this.currentScreen&&(this.currentScreen.show(),void 0!==this.currentScreen.taskList?this.editTaskListButton.style.display="flex":this.editTaskListButton.style.display="none")}}class vt{constructor(t){this.app=t}init(){this.buttonAllTasks=document.getElementById("btn-screen-alltasks"),this.buttonTodayTasks=document.getElementById("btn-screen-today"),this.update(),document.getElementById("new-list").addEventListener("click",(t=>{this.createNewTaskList()})),this.buttonAllTasks.addEventListener("click",(()=>{this.app.mainUI.showAllTasks()})),this.buttonTodayTasks.addEventListener("click",(()=>{this.app.mainUI.showTodayTasks()}))}update(){let t=Object.values(this.app.storage.taskLists),e=document.getElementById("task-lists");e.innerHTML="";for(let n=0;n<t.length;n++){let a=t[n],i=this.getTaskListElement(a);e.appendChild(i),i.addEventListener("click",(()=>{this.app.mainUI.showTaskList(a)}))}this.updateElementTaskAmount(this.buttonAllTasks,this.app.storage.getAllTasks().length)}getTaskListElement(t){let e=document.createElement("button");return e.classList.add("btn-task-list"),e.innerHTML=`\n      <i class="fa-solid ${t.icon} icon-square" style="background-color: ${t.color};"></i>\n      <p class="task-list-name">${t.name}</p>\n      <p class="task-amount">${t.tasks.length}</p>\n    `,e.classList.add("tasklist-"+t.id),e}createNewTaskList(){let t=this.app.storage.createNewTaskList("New List"),e=document.querySelector(".tasklist-"+t.id);this.openTaskListEditor(e,t),this.update()}openTaskListEditor(t,e){console.log("editing task list: "+e.id),this.app.taskListEditor.open(e)}updateElementTaskAmount(t,e){document.querySelector(`#${t.id} > .task-amount`).textContent=e}}class wt{constructor(t){this.app=t}init(){this.editorTitle=document.getElementById("task-list-editor-title"),this.editorElement=document.getElementById("task-list-editor"),this.editorBody=document.getElementById("task-list-editor-body"),this.cancelButton=document.getElementById("task-list-editor-cancel"),this.saveButton=document.getElementById("task-list-editor-save"),this.nameInput=document.getElementById("task-list-editor-name"),this.cancelButton.addEventListener("click",(()=>{this.cancel()})),this.saveButton.addEventListener("click",(()=>{this.saveButton.classList.contains("disabled")||this.save()})),this.nameInput.addEventListener("input",(()=>{this.update()}))}update(){this.nameInput.value.length<1?this.saveButton.classList.add("disabled"):this.saveButton.classList.remove("disabled")}updateColorPicker(){let t=document.getElementById("task-list-editor-colors");t.innerHTML="",["#E91E63","#9C27B0","#673AB7","#3f51b5","#2196f3","#11736a","#4CAF50","#FFEB3B","#FF9800","#F44336"].forEach((e=>{let n=document.createElement("button");n.classList.add("color-circle"),n.style.backgroundColor=e,this.currentTaskList.color==e&&n.classList.add("selected"),t.appendChild(n),n.addEventListener("click",(()=>{this.setIconColor(e),this.updateIconDisplay(),this.updateColorPicker()}))}))}updateIconPicker(){let t=document.getElementById("task-list-editor-icons");t.innerHTML="",["fa-list-check","fa-heart","fa-house","fa-dumbbell","fa-cake-candles","fa-school","fa-money-bill","fa-book","fa-bookmark","fa-pills","fa-plane","fa-gamepad","fa-paw","fa-dog","fa-cat","fa-basketball","fa-football","fa-volleyball","fa-baseball-bat-ball","fa-square","fa-circle","fa-star"].forEach((e=>{let n=document.createElement("button"),a=document.createElement("icon");a.classList.add("fa-solid"),a.classList.add(e),n.appendChild(a),this.currentTaskList.icon==e&&n.classList.add("selected"),t.appendChild(n),n.addEventListener("click",(()=>{this.setIcon(e),this.updateIconDisplay(),this.updateIconPicker()}))}))}updateIconDisplay(){let t=document.getElementById("task-list-editor-icon");t.style.backgroundColor=this.currentTaskList.color,t.className="",t.classList.add("icon-square"),t.classList.add("fa-solid"),t.classList.add(this.currentTaskList.icon)}setIconColor(t){this.currentTaskList.color=t}setIcon(t){this.currentTaskList.icon=t}open(t){this.reset(),this.currentTaskList=t,t.new||(this.nameInput.value=t.name,this.editorTitle.textContent="Editing List",this.showDeleteButton()),this.show(),this.update(),this.updateColorPicker(),this.updateIconPicker(),this.updateIconDisplay()}show(){this.editorElement.style.display="flex"}hide(){this.editorElement.style.display="none"}cancel(){this.hide(),void 0!==this.currentTaskList&&1==this.currentTaskList.new&&(this.app.storage.deleteTaskList(this.currentTaskList),this.app.sidebar.update())}save(){let t=this.currentTaskList;t.name=this.nameInput.value,t.new&&this.app.mainUI.showTaskList(t),delete t.new,this.app.sidebar.update(),this.app.mainUI.updateCurrentScreen(),this.hide(),this.app.storage.save()}reset(){this.nameInput.value="",this.editorTitle.textContent="New List",this.hideDeleteButton()}showDeleteButton(){if(null==this.deleteButton){let t=document.createElement("button");t.classList.add("btn-delete"),t.textContent="Delete List",this.editorBody.appendChild(t),this.deleteButton=t,t.addEventListener("click",(()=>{if(console.log("deleting list: "+this.currentTaskList.name),this.app.storage.deleteTaskList(this.currentTaskList),this.app.storage.save(),this.app.sidebar.update(),void 0!==this.app.mainUI.getCurrentScreen().taskList&&this.app.mainUI.getCurrentScreen().taskList==this.currentTaskList){let t=Object.values(this.app.storage.taskLists)[0];this.app.mainUI.showTaskList(t)}this.hide()}))}else this.deleteButton.style.display="block"}hideDeleteButton(){void 0!==this.deleteButton&&(this.deleteButton.style.display="none")}}class Tt{constructor(t){this.id=crypto.randomUUID(),this.name=t,this.description="",this.date=void 0,this.listId=void 0}}class xt{constructor(t){this.id=crypto.randomUUID(),this.name=t,this.tasks=[],this.color="#11736a",this.icon="fa-list-check"}}class Lt{constructor(t){this.app=t,this.localStorageKey="todoListAppLocalStorage",this.taskLists={}}load(){let t=localStorage.getItem(this.localStorageKey);if(null!==t){let e=JSON.parse(t);this.taskLists=e,console.log("Loaded data from local storage")}else{console.log("Local storage data for '"+this.localStorageKey+"' is empty!");let t=new xt("Tasks");this.taskLists[t.id]=t}this.defaultTaskList=Object.values(this.taskLists)[0]}save(){let t=JSON.stringify(this.taskLists);localStorage.setItem(this.localStorageKey,t)}createNewTask(t){return new Tt(t)}createNewTaskList(t){let e=new xt(t);return this.taskLists[e.id]=e,e.new=!0,e}getTaskList(t){const e=Object.values(this.taskLists);for(let n=0;n<e.length;n++)if(e[n].name===t)return e[n];return null}getTaskListById(t){return this.taskLists[t]}getTaskLists(){return Object.values(this.taskLists)}getDefaultTaskList(){return this.defaultTaskList}deleteTaskList(t){delete this.taskLists[t.id]}addTaskToList(t,e){e.tasks.push(t),t.listId=e.id}removeTaskFromList(t,e){let n=t.tasks.indexOf(e);t.tasks.splice(n,1)}deleteTask(t){let e=this.getTaskListById(t.listId);this.removeTaskFromList(e,t)}getAllTasks(){let t=[];return this.getTaskLists().forEach((e=>{e.tasks.forEach((e=>{t.push(e)}))})),t}getTodayTasks(){return this.getAllTasks().filter((t=>{if(void 0!==t.date&&S(E(t.date),new Date))return!0}))}}class Dt{constructor(t){this.app=t}init(){this.titleElement=document.getElementById("task-editor-title"),this.editorElement=document.getElementById("task-editor"),this.editorBody=document.getElementById("task-editor-body"),this.cancelButton=document.getElementById("task-editor-cancel"),this.saveButton=document.getElementById("task-editor-save"),this.nameInput=document.getElementById("task-editor-name"),this.descriptionInput=document.getElementById("task-editor-description"),this.dateInput=document.getElementById("task-editor-date"),this.taskListPicker=document.getElementById("task-editor-list"),this.cancelButton.addEventListener("click",(()=>{this.cancel()})),this.saveButton.addEventListener("click",(()=>{this.saveButton.classList.contains("disabled")||this.save()})),this.nameInput.addEventListener("input",(()=>{this.update()}))}update(){""!==this.nameInput.value?this.saveButton.classList.remove("disabled"):this.saveButton.classList.add("disabled")}updateTaskListPicker(){let t=this.taskListPicker,e=this.app.storage.getTaskLists();t.innerHTML="",e.forEach((e=>{let n=document.createElement("option");n.value=e.id,n.textContent=e.name,t.appendChild(n)})),void 0!==this.currentTask.listId&&(t.value=this.currentTask.listId)}open(t){this.currentTask=t,this.reset(),this.show(),!0!==this.currentTask.new&&this.restoreValues(),this.update(),this.updateTaskListPicker()}show(){this.editorElement.style.display="flex"}hide(){this.editorElement.style.display="none"}reset(){this.nameInput.value="",this.descriptionInput.value="",this.dateInput.value="",this.titleElement.textContent="New Task"}cancel(){this.hide()}save(){let t=this.currentTask,e=this.app.storage.getTaskListById(this.taskListPicker.value);if(t.name=this.nameInput.value,t.description=this.descriptionInput.value,void 0!==t.listId&&t.listId!==e.id&&!t.new){let n=this.app.storage.getTaskListById(t.listId);this.app.storage.removeTaskFromList(n,t),this.app.storage.addTaskToList(t,e)}t.listId=e.id,""!==this.dateInput.value&&(t.date=this.dateInput.value),t.new&&(this.app.storage.addTaskToList(t,e),delete this.currentTask.new),this.hide(),this.app.mainUI.updateCurrentScreen(),this.app.sidebar.update(),this.app.storage.save()}restoreValues(){this.nameInput.value=this.currentTask.name,this.descriptionInput.value=this.currentTask.description,this.dateInput.value=this.currentTask.date,this.titleElement.textContent="Editing Task"}}window.todoList=new class{constructor(){this.mainUI=new yt(this),this.sidebar=new vt(this),this.storage=new Lt(this),this.taskListEditor=new wt(this),this.taskEditor=new Dt(this)}init(){console.log("Starting todo list app"),this.tasks={},this.storage.load(),this.mainUI.init(),this.sidebar.init(),this.taskListEditor.init(),this.taskEditor.init()}},todoList.init()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,